import sys
from datetime import date,datetime

class Record:
    """Represent a record."""
    def __init__(self, date, category, name, amount):
        """Constructor"""
        self._date = date
        self._category = category 
        self._name = name
        self._amount = amount

    @property
    def date(self):
        """Using @property decorator so that we can reuse the name of a property(category)"""
        return self._date

    @property
    def category(self):
        """Using @property decorator so that we can reuse the name of a property(category)"""
        return self._category

    @property
    def name(self):
        """Using @property decorator so that we can reuse the name of a property(name)"""
        return self._name

    @property
    def amount(self):
        """Using @property decorator so that we can reuse the name of a property(amount)"""
        return self._amount

class Records:
    """Maintain a list of all the 'Record's and the initial amount of money."""
    def __init__(self): 
        '''Initialize records and balance.'''
        try: 
            with open('records.txt') as fh:
                self._initial_money = int(fh.readline()) 
                content = fh.readlines() 
                self._records = [] 
                for line in content: 
                    record = line.split() 
                    self._records.append(Record(record[0],record[1],record[2],int(record[3])))
            ##print('Welcome back!')
        except FileNotFoundError: 
            try: 
                self._initial_money = 0
                self._records = [] 
            except: 
                ##sys.stderr.write('Invalid value for money. Set to 0 by default.\n') 
                self._initial_money = 0
                self._records = []
        except ValueError: 
            ##sys.stderr.write('Invalid format in records.txt. Deleting the contents.\n')
            try:
                self._initial_money = 0
                self._records = []
            except:
                ##sys.stderr.write('Invalid value for money. Set to 0 by default.\n')
                self._initial_money = 0
                self._records = [] 
        
    def add(self, record, categories): 
        '''Add a new record.'''
        try:  
            print(type(record))
            self._new_item = record.split()
            if len(self._new_item) == 4: 
                if categories.is_category_valid(self._new_item[1]) == False: 
                    sys.stderr.write('The specific category is not in the category list.\n')
                    sys.stderr.write('You can check the category list by command "view categories".\n')
                    sys.stderr.write('Fail to add a record.\n') 
                else:
                    if self._new_item[0] != self._new_item[0].replace('/', '-'): 
                        sys.stderr.write('The format of date should be YYYY-MM-DD.\n Fail to add a record.\n')
                    else:
                        record = Record(self._new_item[0], self._new_item[1],self._new_item[2], int(self._new_item[3])) 
                        # self._initial_money = int(self._initial_money)
                        # self._initial_money += record.amount 
                        self._records.append(record)
            else:
                if categories.is_category_valid(self._new_item[0]) == False: 
                    sys.stderr.write('The specific category is not in the category list.\n')
                    sys.stderr.write('You can check the category list by command "view categories".\n')
                    sys.stderr.write('Fail to add a record.\n')
                else:
                    today = str(date.today())
                    now = date.fromisoformat(today)
                    record = Record(now, self._new_item[0], self._new_item[1], int(self._new_item[2])) 
                    # self._initial_money += record.amount 
                    self._records.append(record) 
        except ValueError: 
            sys.stderr.write('Invalid value for money.\nFail to add a record.\n')
        except IndexError: 
            sys.stderr.write('The format of a record should be like this: breakfast -50.\nFail to add a record.\n')


    def view(self): 
        '''View records.'''
        print('Here\'s your expense and income records:')
        print(f"{'Date':11s}{'Category':16s}{'Description':21s}{'Amount'}")
        print('========== =============== ==================== ======')
        for record in self._records:
            # print(record.date)
            # print(f'{record.date:11s}{record.category:16s}{record.name:21s}{record.amount}')
            date = str(record.date)
            print(f'{date:11s}{record.category:16s}{record.name:21s}{record.amount}')
        print('========== =============== ==================== ======')
        print(f'Now you have {self._initial_money} dollars')

    def delete(self, delete_record):
        '''Delete a record'''
        try:
            self._del_item = delete_record.split()
            record = Record(self._del_item[0], self._del_item[1], self._del_item[2], int(self._del_item[3])) 
            # self._initial_money -= record.amount
            for index, item in enumerate(self._records):
                if item.category == record.category:
                    del self._records[index]
        except ValueError:
            sys.stderr.write('Invalid value for index. Fail to delete a record.\n')
        except IndexError:
            sys.stderr.write(f'There\'s no record with {delete_record}. Fail to delete a record.\n')

    def find(self, category, target_categories): 
        '''Find all records in the category that we want'''
        total = 0
        print(f'Here\'s your expense and income records under category "{category}":')
        print(f"{'Date':11s}{'Category':16s}{'Description':21s}{'Amount'}")
        print('========== =============== ==================== ======')
        for record in self._records:
            if record.category in target_categories:
                date = str(record.date)
                print(f"{date:11s}{record.category:17s}{record.name:21s}{record.amount}")
                total += record.amount
        print('========== =============== ==================== ======')
        print(f'The total amount above is {total}')
    
    def save(self):
        '''Save records.'''
        with open('records.txt','w') as fh: 
            fh.write(str(self._initial_money) +'\n') 
            for index, record in enumerate(self._records):
                self._records[index] = f"{record.date} {record.category} {record.name} {record.amount}\n"
            fh.writelines(self._records)
            
